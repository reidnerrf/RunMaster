import AsyncStorage from '@react-native-async-storage/async-storage';
import { store } from '../store';
import { 
  checkDataIntegrity, 
  getStoreStats, 
  backupStore,
  cleanupOldData 
} from '../store/utils';

// Configura√ß√µes da aplica√ß√£o
const APP_CONFIG = {
  version: '1.0.0',
  buildNumber: '1',
  minSupportedVersion: '1.0.0',
  autoBackupInterval: 24 * 60 * 60 * 1000, // 24 horas
  maxBackupAge: 30, // 30 dias
  dataRetentionDays: {
    workouts: 90,
    notifications: 60,
    logs: 30,
  },
};

// Interface para configura√ß√µes da aplica√ß√£o
interface AppConfig {
  isFirstLaunch: boolean;
  lastLaunch: string;
  launchCount: number;
  lastBackup: string | null;
  lastCleanup: string | null;
  appVersion: string;
  buildNumber: string;
}

// Fun√ß√£o principal de inicializa√ß√£o
export const initializeApp = async (): Promise<void> => {
  try {
    console.log('üöÄ Iniciando aplica√ß√£o...');
    
    // Passo 1: Verificar configura√ß√µes da aplica√ß√£o
    await checkAppConfig();
    
    // Passo 2: Verificar integridade dos dados
    await checkDataHealth();
    
    // Passo 3: Limpar dados antigos
    await performDataCleanup();
    
    // Passo 4: Verificar necessidade de backup
    await checkBackupNeeds();
    
    // Passo 5: Inicializar servi√ßos essenciais
    await initializeEssentialServices();
    
    // Passo 6: Verificar atualiza√ß√µes
    await checkForUpdates();
    
    console.log('‚úÖ Aplica√ß√£o inicializada com sucesso');
    
  } catch (error) {
    console.error('‚ùå Erro na inicializa√ß√£o da aplica√ß√£o:', error);
    throw error;
  }
};

// Verificar configura√ß√µes da aplica√ß√£o
const checkAppConfig = async (): Promise<void> => {
  try {
    const configKey = 'app_config';
    let config: AppConfig = await AsyncStorage.getItem(configKey).then(
      data => data ? JSON.parse(data) : null
    );
    
    if (!config) {
      // Primeira execu√ß√£o
      config = {
        isFirstLaunch: true,
        lastLaunch: new Date().toISOString(),
        launchCount: 1,
        lastBackup: null,
        lastCleanup: null,
        appVersion: APP_CONFIG.version,
        buildNumber: APP_CONFIG.buildNumber,
      };
      
      console.log('üéâ Primeira execu√ß√£o da aplica√ß√£o');
    } else {
      // Verificar se √© uma nova vers√£o
      const isNewVersion = config.appVersion !== APP_CONFIG.version;
      
      if (isNewVersion) {
        console.log(`üîÑ Nova vers√£o detectada: ${config.appVersion} ‚Üí ${APP_CONFIG.version}`);
        
        // Executar migra√ß√µes se necess√°rio
        await performVersionMigration(config.appVersion, APP_CONFIG.version);
      }
      
      // Atualizar configura√ß√µes
      config = {
        ...config,
        isFirstLaunch: false,
        lastLaunch: new Date().toISOString(),
        launchCount: config.launchCount + 1,
        appVersion: APP_CONFIG.version,
        buildNumber: APP_CONFIG.buildNumber,
      };
    }
    
    // Salvar configura√ß√µes atualizadas
    await AsyncStorage.setItem(configKey, JSON.stringify(config));
    
    console.log(`üì± Aplica√ß√£o executada ${config.launchCount} vezes`);
    
  } catch (error) {
    console.error('Erro ao verificar configura√ß√µes:', error);
    throw error;
  }
};

// Verificar sa√∫de dos dados
const checkDataHealth = async (): Promise<void> => {
  try {
    console.log('üîç Verificando sa√∫de dos dados...');
    
    const integrityCheck = checkDataIntegrity();
    
    if (integrityCheck.hasIssues) {
      console.warn('‚ö†Ô∏è Problemas de integridade detectados:', integrityCheck.issues);
      
      // Tentar reparar problemas autom√°ticos
      await attemptDataRepair(integrityCheck.issues);
    } else {
      console.log('‚úÖ Dados √≠ntegros');
    }
    
    // Obter estat√≠sticas da store
    const stats = getStoreStats();
    console.log('üìä Estat√≠sticas da store:', {
      totalPendingChanges: stats.totalPendingChanges,
      slices: Object.keys(stats.slices).length,
    });
    
  } catch (error) {
    console.error('Erro ao verificar sa√∫de dos dados:', error);
    throw error;
  }
};

// Tentar reparar problemas de dados
const attemptDataRepair = async (issues: string[]): Promise<void> => {
  try {
    console.log('üîß Tentando reparar problemas de dados...');
    
    for (const issue of issues) {
      if (issue.includes('sem ID v√°lido')) {
        // Problema de ID inv√°lido - tentar gerar novo
        console.log('üÜî Reparando IDs inv√°lidos...');
        // Implementar l√≥gica de reparo espec√≠fica
      }
      
      if (issue.includes('Modo de tema inv√°lido')) {
        // Problema de tema - resetar para padr√£o
        console.log('üé® Resetando tema para padr√£o...');
        store.dispatch({ type: 'theme/resetToDefault' });
      }
    }
    
    console.log('‚úÖ Reparo de dados conclu√≠do');
    
  } catch (error) {
    console.error('Erro ao reparar dados:', error);
    // N√£o falhar a inicializa√ß√£o por problemas de reparo
  }
};

// Limpar dados antigos
const performDataCleanup = async (): Promise<void> => {
  try {
    console.log('üßπ Executando limpeza de dados...');
    
    const configKey = 'app_config';
    const config: AppConfig = await AsyncStorage.getItem(configKey).then(
      data => data ? JSON.parse(data) : null
    );
    
    if (config && config.lastCleanup) {
      const lastCleanup = new Date(config.lastCleanup);
      const daysSinceLastCleanup = (Date.now() - lastCleanup.getTime()) / (1000 * 60 * 60 * 24);
      
      if (daysSinceLastCleanup < 1) {
        console.log('‚úÖ Limpeza recente, pulando...');
        return;
      }
    }
    
    // Executar limpeza
    const cleanupResult = cleanupOldData();
    console.log('üßπ Limpeza conclu√≠da:', cleanupResult.message);
    
    // Atualizar timestamp da limpeza
    if (config) {
      config.lastCleanup = new Date().toISOString();
      await AsyncStorage.setItem(configKey, JSON.stringify(config));
    }
    
  } catch (error) {
    console.error('Erro na limpeza de dados:', error);
    // N√£o falhar a inicializa√ß√£o por problemas de limpeza
  }
};

// Verificar necessidade de backup
const checkBackupNeeds = async (): Promise<void> => {
  try {
    console.log('üíæ Verificando necessidade de backup...');
    
    const configKey = 'app_config';
    const config: AppConfig = await AsyncStorage.getItem(configKey).then(
      data => data ? JSON.parse(data) : null
    );
    
    if (config && config.lastBackup) {
      const lastBackup = new Date(config.lastBackup);
      const timeSinceLastBackup = Date.now() - lastBackup.getTime();
      
      if (timeSinceLastBackup < APP_CONFIG.autoBackupInterval) {
        console.log('‚úÖ Backup recente, pulando...');
        return;
      }
    }
    
    // Executar backup autom√°tico
    console.log('üíæ Executando backup autom√°tico...');
    const backup = await backupStore();
    console.log('‚úÖ Backup autom√°tico criado:', backup.timestamp);
    
    // Atualizar timestamp do backup
    if (config) {
      config.lastBackup = backup.timestamp;
      await AsyncStorage.setItem(configKey, JSON.stringify(config));
    }
    
  } catch (error) {
    console.error('Erro no backup autom√°tico:', error);
    // N√£o falhar a inicializa√ß√£o por problemas de backup
  }
};

// Inicializar servi√ßos essenciais
const initializeEssentialServices = async (): Promise<void> => {
  try {
    console.log('‚öôÔ∏è Inicializando servi√ßos essenciais...');
    
    // Servi√ßo de localiza√ß√£o
    await initializeLocationService();
    
    // Servi√ßo de notifica√ß√µes
    await initializeNotificationService();
    
    // Servi√ßo de sa√∫de
    await initializeHealthService();
    
    // Servi√ßo de pagamentos
    await initializePaymentService();
    
    console.log('‚úÖ Servi√ßos essenciais inicializados');
    
  } catch (error) {
    console.error('Erro na inicializa√ß√£o de servi√ßos:', error);
    throw error;
  }
};

// Inicializar servi√ßo de localiza√ß√£o
const initializeLocationService = async (): Promise<void> => {
  try {
    // Verificar permiss√µes de localiza√ß√£o
    const locationPermission = await AsyncStorage.getItem('location_permission');
    
    if (!locationPermission) {
      console.log('üìç Configurando permiss√µes de localiza√ß√£o...');
      // Implementar solicita√ß√£o de permiss√£o
    }
    
  } catch (error) {
    console.error('Erro na inicializa√ß√£o do servi√ßo de localiza√ß√£o:', error);
  }
};

// Inicializar servi√ßo de notifica√ß√µes
const initializeNotificationService = async (): Promise<void> => {
  try {
    // Verificar permiss√µes de notifica√ß√£o
    const notificationPermission = await AsyncStorage.getItem('notification_permission');
    
    if (!notificationPermission) {
      console.log('üîî Configurando permiss√µes de notifica√ß√£o...');
      // Implementar solicita√ß√£o de permiss√£o
    }
    
  } catch (error) {
    console.error('Erro na inicializa√ß√£o do servi√ßo de notifica√ß√£o:', error);
  }
};

// Inicializar servi√ßo de sa√∫de
const initializeHealthService = async (): Promise<void> => {
  try {
    // Verificar permiss√µes de sa√∫de
    const healthPermission = await AsyncStorage.getItem('health_permission');
    
    if (!healthPermission) {
      console.log('‚ù§Ô∏è Configurando permiss√µes de sa√∫de...');
      // Implementar solicita√ß√£o de permiss√£o
    }
    
  } catch (error) {
    console.error('Erro na inicializa√ß√£o do servi√ßo de sa√∫de:', error);
  }
};

// Inicializar servi√ßo de pagamentos
const initializePaymentService = async (): Promise<void> => {
  try {
    // Verificar configura√ß√µes de pagamento
    const paymentConfig = await AsyncStorage.getItem('payment_config');
    
    if (!paymentConfig) {
      console.log('üí≥ Configurando servi√ßo de pagamentos...');
      // Implementar configura√ß√£o inicial
    }
    
  } catch (error) {
    console.error('Erro na inicializa√ß√£o do servi√ßo de pagamentos:', error);
  }
};

// Verificar atualiza√ß√µes
const checkForUpdates = async (): Promise<void> => {
  try {
    console.log('üîÑ Verificando atualiza√ß√µes...');
    
    // Aqui voc√™ implementaria a l√≥gica de verifica√ß√£o de atualiza√ß√µes
    // Por exemplo, verificar com um servidor de atualiza√ß√µes
    
    console.log('‚úÖ Verifica√ß√£o de atualiza√ß√µes conclu√≠da');
    
  } catch (error) {
    console.error('Erro na verifica√ß√£o de atualiza√ß√µes:', error);
    // N√£o falhar a inicializa√ß√£o por problemas de atualiza√ß√£o
  }
};

// Executar migra√ß√£o de vers√£o
const performVersionMigration = async (oldVersion: string, newVersion: string): Promise<void> => {
  try {
    console.log(`üîÑ Executando migra√ß√£o de ${oldVersion} para ${newVersion}...`);
    
    // Implementar l√≥gica de migra√ß√£o espec√≠fica por vers√£o
    if (oldVersion === '0.9.0' && newVersion === '1.0.0') {
      console.log('üîÑ Migra√ß√£o para v1.0.0...');
      // Implementar migra√ß√µes espec√≠ficas
    }
    
    console.log('‚úÖ Migra√ß√£o conclu√≠da');
    
  } catch (error) {
    console.error('Erro na migra√ß√£o de vers√£o:', error);
    throw error;
  }
};

// Fun√ß√£o para obter configura√ß√µes da aplica√ß√£o
export const getAppConfig = async (): Promise<AppConfig | null> => {
  try {
    const configKey = 'app_config';
    const config = await AsyncStorage.getItem(configKey);
    return config ? JSON.parse(config) : null;
  } catch (error) {
    console.error('Erro ao obter configura√ß√µes da aplica√ß√£o:', error);
    return null;
  }
};

// Fun√ß√£o para limpar dados da aplica√ß√£o
export const clearAppData = async (): Promise<void> => {
  try {
    console.log('üóëÔ∏è Limpando dados da aplica√ß√£o...');
    
    // Limpar AsyncStorage
    await AsyncStorage.clear();
    
    // Limpar store
    store.dispatch({ type: 'persist/PURGE' });
    
    console.log('‚úÖ Dados da aplica√ß√£o limpos');
    
  } catch (error) {
    console.error('Erro ao limpar dados da aplica√ß√£o:', error);
    throw error;
  }
};

// Fun√ß√£o para verificar se √© primeira execu√ß√£o
export const isFirstLaunch = async (): Promise<boolean> => {
  try {
    const config = await getAppConfig();
    return config?.isFirstLaunch || false;
  } catch (error) {
    console.error('Erro ao verificar primeira execu√ß√£o:', error);
    return true;
  }
};

export default {
  initializeApp,
  getAppConfig,
  clearAppData,
  isFirstLaunch,
};